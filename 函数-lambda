#函数 
  Python以万物为对象
  定义 函数以def关键词开头，后接函数名和圆括号()。
      函数执行的代码以冒号起始，并且缩进。
      return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回None。
''def functionname (parameters):
       "函数_文档字符串"
        function_suite
        return [expression]''

#函数参数
 Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态如下：
   位置参数 (positional argument)   arg1 - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定
   默认参数 (default argument)  arg2 = v - 默认参数 = 默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值
   可变参数 (variable argument)  *args - 可变参数，可以是从零个到任意个，自动组装成元组
   关键字参数 (keyword argument)  **kw - 关键字参数，可以是从零个到任意个，自动组装成字典
      可变参数和关键字参数的同异：可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。
                                             关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)
   命名关键字参数 (name keyword argument)
   参数组合
     可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：
        位置参数、默认参数、可变参数和关键字参数。
        位置参数、默认参数、命名关键字参数和关键字参数。
def functionname(arg1, arg2=v, args, *, nkw, *kw):
       "函数_文档字符串"
       function_suite
       return [expression]

  
#变量作用域   global和nonlocal
  定义在函数内部的变量拥有局部作用域，该变量称为局部变量。
  定义在函数外部的变量拥有全局作用域，该变量称为全局变量。
  局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问


#函数闭包
  函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。
    如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。
    通过闭包可以访问外层非全局作用域的变量，这个作用域称为 闭包作用域
   def funX(x):
    def funY(y):
        return x * y

    return funY
    i = funX(8)
    print(type(i))  # <class 'function'>     ###闭包的返回值通常是函数
    print(i(5))  # 40 
#递归函数 
  如果一个函数在内部调用自身本身，这个函数就是递归函数



#匿名函数Lambda 表达式
   在 Python 里有两类函数：
     第一类：用 def 关键词定义的正规函数
     第二类：用 lambda 关键词定义的匿名函数


Python 使用 lambda 关键词来创建匿名函数，而非def关键词，它没有函数名，其语法结构如下：
lambda argument_list: expression
lambda - 定义匿名函数的关键词。
argument_list - 函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。
:- 冒号，在函数参数和表达式中间要加个冒号。
expression - 只是一个表达式，输入函数参数，输出一些值。


@expression 中没有 return 语句，因为 lambda 不需要它来返回，表达式本身结果就是返回值。
@匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数


函数式编程 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用

   匿名函数 常常应用于函数式编程的高阶函数 (high-order function)中，主要有两种形式：
     参数是函数 (filter, map)
     返回值是函数 (closure)
 filter(function, iterable) 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换 
		 odd = lambda x: x % 2 == 1
     templist = filter(odd, [1, 2, 3, 4, 5, 6, 7, 8, 9])
     print(list(templist))  # [1, 3, 5, 7, 9]
 map(function, *iterables) 根据提供的函数对指定序列做映射
    m1 = map(lambda x: x ** 2, [1, 2, 3, 4, 5])
   print(list(m1))  
   # [1, 4, 9, 16, 25]

   m2 = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
   print(list(m2))  
   # [3, 7, 11, 15, 19]

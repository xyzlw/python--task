python语言是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。在机器学习、深度学习领域应用更为广泛，基于此，尝试过一遍常用python语言知识，为未来这两个方向的应用打下基础。
#注释
  两种方式： #   '''   '''    
#运算
  +  -  *  /   //(整除)  %(取余)   **(幂)
#比较运算
  ＞　　＜　　＞＝　　＜＝　　＝＝　　　！＝
＃逻辑运算
　and  or   not
#位运算（二进制）
  ~    按位取反 （-1减去原值）  ~4  -5
  &	   按位与	 4 & 5  4
  |	   按位或   
  ^	   按位异或	 4 ^ 5  1
  <<	 左移	    4 << 2  16
  >>	 右移	    4 >> 2  1
#其他运算
  in  not in   is   not is 
#运算符的优先级
 一元运算符优于二元运算符。例如3 ** -2等价于3 ** (-2)
 先算术运算，后移位运算，最后位运算。例如 1 << 3 + 2 & 7等价于 1 << (3 + 2)) & 7
 逻辑运算最后结合。例如3 < 4 and 4 < 5等价于(3 < 4) and (4 < 5)
#变量和赋值
   在使用变量之前，需要对其先赋值
   变量名可以包括字母、数字、下划线、但变量名不能以数字开头
   Python 变量名是大小写敏感的，foo != Foo
   
   
 #数据类型与转换
   int	整型 <class 'int'>	-876, 10
   float	浮点型<class 'float'>	3.149, 11.11
   bool	布尔型<class 'bool'>	True, False
   
  浮点数 有时候我们想保留浮点型的小数点后 n 位。可以用 decimal 包里的 Decimal 对象和 getcontext() 方法来实现
#布尔型
  布尔 (boolean) 型变量只能取两个值，True 和 False。当把布尔型变量用在数字运算中，用 1 和 0 代表 True 和 False
 
    除了直接给变量赋值 True 和 False，还可以用 bool(X) 来创建变量，其中 X 可以是
    基本类型：整型、浮点型、布尔型
    容器类型：字符串、元组、列表、字典和集合
   【例子】bool 作用在基本类型变量：X 只要不是整型 0、浮点型 0.0，bool(X) 就是 True，其余就是 False

 
  确定bool(X) 的值是 True 还是 False，就看 X 是不是空，空的话就是 False
   【例子】bool 作用在容器类型变量：X 只要不是空的变量，bool(X) 就是 True，其余就是 False不空的话就是 True。
    对于数值变量，0, 0.0 都可认为是空的。
    对于容器变量，里面没元素就是空的。
    获取类型信息
 
 
 #获取类型信息 type(object)  isinstance()
  type() 不会认为子类是一种父类类型，不考虑继承关系。
  isinstance() 会认为子类是一种父类类型，考虑继承关系。

#类型装换
  int()  float()  str()
  
#print()   print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
  将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按str()方式进行转换为字符串输出；
  关键字参数sep是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；
  关键字参数end是输出结束时的字符，默认是换行符\n；
  关键字参数file是定义流输出的文件，可以是标准的系统输出sys.stdout，也可以重定义为别的文件；
  关键字参数flush是立即把内容输出到流文件，不作缓存
  
  print(..,end='$')
  print(..,sep='&')
  
  
  
  
#位运算
  利用位运算实现快速计算
  通过 <<，>> 快速计算2的倍数问题。

n << 1 -> 计算 n*2
n >> 1 -> 计算 n/2，负奇数的运算不可用
n << m -> 计算 n*(2^m)，即乘以 2 的 m 次方
n >> m -> 计算 n/(2^m)，即除以 2 的 m 次方
1 << n -> 2^n
通过 ^ 快速交换两个整数。 通过 ^ 快速交换两个整数。

a ^= b
b ^= a
a ^= b
通过 a & (-a) 快速获取a的最后为 1 位置的整数。

00 00 01 01 -> 5
&
11 11 10 11 -> -5
---
00 00 00 01 -> 1

00 00 11 10 -> 14
&
11 11 00 10 -> -14
---
00 00 00 10 -> 2



#条件语句
  if
  if-else
  if-elif-else
  
  
#assert 关键词
  assert这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出AssertionError的异常


#while 循环
while语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于while代码块的缩进语句。
while循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。
如果布尔表达式不带有<、>、==、！=、in、not in等运算符，仅仅给出数值之类的条件，也是可以的。当while后写入一个非零整数时，视为真值，执行循环体；写入0时，视为假值，不执行循环体。也可以写入str、list或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体 
   while-or
   break 打断循环
   
#for循环   （可能是最常用的循环）
#continue  跳过未执行子句，继续下一轮循环
#pass 占位，什么也不干
 
 
 
#range() 函数
range([start,] stop[, step=1])  左闭右开


#列表推导
   x = [-4, -2, 0, 2, 4]
   y = [a * 2 for a in x]
   print(y)
   # [-8, -4, 0, 4, 8]
 元祖  ()
 字典  {}
 
#异常处理
  try-except
  


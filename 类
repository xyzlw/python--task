#对象 = 属性 + 方法

 对象是类的实例。换句话说，类主要定义对象的结构，然后我们以类为模板创建对象。类不但包含方法定义，而且还包含所有实例共享的数据
 
 关键字 class 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现
 
 关键字 class 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现
 class Turtle:  # Python中的类名约定以大写字母开头
    """关于类的一个简单例子"""
    # 属性
    color = 'green'
    weight = 10
    legs = 4
    shell = True
    mouth = '大嘴'

    # 方法
    def climb(self):
        print('我正在很努力的向前爬...')

    def run(self):
        print('我正在飞快的向前跑...')

    def bite(self):
        print('咬死你咬死你!!')

    def eat(self):
        print('有得吃，真满足...')

    def sleep(self):
        print('困了，睡了，晚安，zzz')


 
 
 继承：子类自动共享父类之间数据和方法的机制
   class MyList(list):
    pass
   lst = MyList([1, 5, 2, 7, 8])
   lst.append(9)
   lst.sort()
   print(lst)
      # [1, 2, 5, 7, 8, 9]
      
      
      
      
 多态：不同对象对同一方法响应不同的行动
 
 
 

Python 的 self 相当于 C++ 的 this 指针 
 类的方法与普通的函数只有一个特别的区别 —— 它们必须有一个额外的第一个参数名称（对应于该实例，即该对象本身），按照惯例它的名称是 self。在调用方法时，我们无需明确提供与参数 self 相对应的参数
      
      class Test:
    def prt(self):
        print(self)
        print(self.__class__)


t = Test()
t.prt()
# <__main__.Test object at 0x000000BC5A351208>
# <class '__main__.Test'>



类有一个名为__init__(self[, param1, param2...])的魔法方法，该方法在类实例化时会自动调用
公有和私有
   在 Python 中定义私有变量只需要在变量名或函数名加双下划线 __
   
   
   
 #类的继承
 
 Python 同样支持类的继承，派生类的定义如下所示：

class DerivedClassName(BaseClassName):
       statement-1
              .
              .
              .
       statement-N

BaseClassName（基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：

class DerivedClassName(modname.BaseClassName):
       statement-1
              .
              .
              .
       statement-N
       
       
   ￥如果子类中定义与父类同名的方法或属性，则会自动覆盖父类对应的方法或属性
   
   
   
   
#圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法
class DerivedClassName(Base1, Base2, Base3):
       statement-1
              .
              
              
              
#类对象 实例对象

类对象：创建一个类，其实也是一个对象也在内存开辟了一块空间，称为类对象，类对象只有一个。

class A(object):
       pass
       statement-N
实例对象：就是通过实例化类创建的对象，称为实例对象，实例对象可以有多个


类属性：类里面方法外面定义的变量称为类属性。类属性所属于类对象并且多个实例对象之间共享同一个类属性，说白了就是类属性所有的通过该类实例化的对象都能共享
实例属性：实例属性和具体的某个实例对象有关系，并且一个实例对象和另外一个实例对象是不共享属性的，说白了实例属性只能在自己的对象里面使用，其他的对象不能直接使用，因为self是谁调用，它的值就属于该对象
            

#绑定
   要求方法需要有实例才能被调用，这种限制其实就是 Python 所谓的绑定
   
#内置函数
  issubclass(class, classinfo) 方法用于判断参数 class 是否是类型参数 classinfo 的子类
  classinfo可以是类对象的元组，只要class是其中任何一个候选类的子类，则返回True
  一个类被认为是其自身的子类
  
  
  isinstance(object, classinfo) 方法用于判断一个对象是否是一个已知的类型，类似type()
  type()不会认为子类是一种父类类型，不考虑继承关系/isinstance()会认为子类是一种父类类型，考虑继承关系
  如果第一个参数不是对象，则永远返回False
  
  
  
  
  hasattr(object, name)用于判断对象是否包含对应的属性
  class Coordinate:
    x = 10
    y = -5
    z = 0


point1 = Coordinate()
print(hasattr(point1, 'x'))  # True
print(hasattr(point1, 'y'))  # True
print(hasattr(point1, 'z'))  # True
print(hasattr(point1, 'no'))  # False


getattr(object, name[, default])用于返回一个对象属性值

setattr(object, name, value)对应函数 getattr()，用于设置属性值，该属性不一定是存在的

delattr(object, name)用于删除属性
      
